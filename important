React Hooks are managed internally based in his position, so creating them conditionally will ocasionally result in errors

The event object is automatically passed to the setText function by the browser, as it is a standard argument for DOM event handler functions.

In maps of JSX elements never use index property as key. React uses this key internally and create confusion for example when the first element (0) is deleted from a list but reamins as the first element (0) in the array.


In React, the key prop is used to identify elements in a list of JSX elements, and to help React efficiently update the list when the elements change. The key should be a stable, unique identifier for each element in the list.

The index of an element in an array is not always a stable identifier, because the elements in the array can be reordered, added, or removed. If the index of an element is used as the key, and the elements in the array are reordered or modified, the key for each element will also change, which can cause React to re-render the entire list of elements.

This can lead to poor performance, because React will unnecessarily re-render elements that haven't actually changed. It can also lead to unexpected behavior, because React may not be able to properly identify which elements have changed, and may end up rendering the wrong elements or in the wrong order.

It is generally a better practice to use a stable, unique identifier for each element in the list, such as a unique ID from a database, or a unique value generated by the component. This will allow React to properly identify which elements have changed, and will help improve the performance and stability of the component.

There are several reasons why defining methods outside of the component and passing them as props can be a better practice:

It helps to keep the component focused on rendering UI, and separates the component's logic from its rendering.
It makes the component easier to test, because the component's logic can be tested separately from its rendering.
It can make the component easier to reuse, because the component's logic is not tied to the component itself.

Instead of hiding the the detail of implementation of setting a state value of a parent component from a child one, we can that by an event.